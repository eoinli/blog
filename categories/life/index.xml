<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>生活 on Eoin Lee's Blog</title><link>https://eoin.blog/categories/life/</link><description>Recent content in 生活 on Eoin Lee's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 10 May 2024 20:00:00 +0800</lastBuildDate><atom:link href="https://eoin.blog/categories/life/index.xml" rel="self" type="application/rss+xml"/><item><title>旧好重拾觅新知：简述 OI Jumper 的开发之路</title><link>https://eoin.blog/p/work-on-oi-jumper/</link><pubDate>Fri, 10 May 2024 20:00:00 +0800</pubDate><guid>https://eoin.blog/p/work-on-oi-jumper/</guid><description>&lt;img src="https://eoin.blog/p/work-on-oi-jumper/banner.webp" alt="Featured image of post 旧好重拾觅新知：简述 OI Jumper 的开发之路" />&lt;p>我觉得，截至本文落笔之时，应该没有多少人会知道 &lt;a class="link" href="https://oi-jumper.eoin.blog" target="_blank" rel="noopener"
>OI Jumper&lt;/a> 这个东西。这是我前两个月利用闲余时间开发的一款 OI 学习辅助工具。其功能非常简单，来到主页面，选择你需要的 OJ，输入题号或题目名称，按下 Enter 键或点击跳转，就可以自动打开一个浏览器窗口，快速访问你所指定的题目。虽然 OJ 跳题不是什么稀奇功能，当你需要大规模刷题的时候，如果题目分散在数个 OJ 中，而你又不想频繁打开多个主页的时候，OI Jumper 或许会成为一个有力的工具。如果正在阅读本文的你还没有体验过 OI Jumper，欢迎点击上面的链接跳转到它的页面并简单体验一下！ありがとうございます！！！&lt;/p>
&lt;p>OI Jumper 为开源项目，源码在&lt;a class="link" href="https://github.com/eoinli/oi-jumper" target="_blank" rel="noopener"
>对应的 GitHub 仓库&lt;/a>上公开，网页由 Vercel 部署，首次访问可能需要加载一小段时间，浏览器缓存后加载时间就会变快许多。如果你对本项目有任何建议和意见，欢迎创建 issue 或拉取 PR 来做出贡献，谢谢！&lt;/p>
&lt;h2 id="缘起">缘起
&lt;/h2>&lt;p>机缘巧合的一次，我在 Typora 官网发现了一套编辑器主题，名称为 Tailwind。好奇的我上网搜索了这个词语，并找到了 &lt;a class="link" href="https://tailwindcss.com/" target="_blank" rel="noopener"
>Tailwind CSS&lt;/a> 这一宝藏框架。不需要亲自写 CSS，只需要在 HTML 代码里加入对应的 class name，就可以自动生成样式？我瞬间对它产生了好感，这种好感也随着此后不断碰到使用 Tailwind CSS 完成的优质网页而不断上升。尽管如此，由于常规学习生活所限，我一直没有找到什么学习它的理由或者应用它的地方。&lt;/p>
&lt;p>直到开始 OI 集训之后，我们的刷题量大幅上升，许多题目都分散在不同的 OJ 里，这使我这样一个半屏浏览器用户感到十分繁琐。为什么不做一个工具来帮我实现跳题呢？这便是 OI Jumper 立项的时候。然而，我退出开发转战 OI 已经有三年之久，网页更是有更长时间没有写过了。迅速拾起前端开发的知识，成为了项目从设想变为现实的一大瓶颈。我突然想到了在我愿望清单中滞留已久的 Tailwind CSS，说不定我能通过它简化一些开发流程。&lt;/p>
&lt;p>立项之时已经是 2024 年 4 月，各种免费 AI 工具早已充斥网络空间，Tailwind CSS 是一个前 AI 时代的产物，所以不如通过 AI 来在实践中快速地学习使用 Tailwind CSS 框架。这么想着，我打开了 Google Gemini 以及 Tailwind CSS 的官方文档，开始研读。&lt;/p>
&lt;h2 id="开发">开发
&lt;/h2>&lt;p>我并不是一个很喜欢读文档的人，所以在按照官网指示安装好环境并初始化之后，我就转向 AI 求助。两天的开发后，我就在 Gemini 的帮助下，利用此前学习的基础 CSS 知识结合着 Tailwind CSS 框架完成了&lt;a class="link" href="https://github.com/eoinli/oi-jumper/commit/f52eafa3c88ca313e63db702eef51a208d1dc6d3" target="_blank" rel="noopener"
>最初的提交&lt;/a>。部署完成的那一刻，我打开网页，感到心里充满了成就感。这时的网页已经实现了基本的题目跳转功能，支持深色模式的调整，且已经支持了洛谷、LibreOJ 和 Codeforces 三个 OJ。&lt;/p>
&lt;p>但这显然是不够的。接下来的半个月里，我陆陆续续对许多 OJ 添加了支持，直到我觉得这个网页应该添加点什么东西。很多时候，我在 OI 刷题时获得的都是题目的名称，如果需要找到对应题目，还是需要去到对应 OJ 的主页上点进搜索。于是，我决定给我的 OI Jumper 添加搜索功能。&lt;/p>
&lt;p>我第一次尝试实现时，原本只针对洛谷进行了开发，我所希望的成品是，页面向洛谷模拟一次搜索，获取到洛谷返回的包含搜索结果的 JSON 信息，然后呈现在 OI Jumper 的网页上。这看似一个很好的想法，但实际实现起来，却不是一般地困难重重。首先碰到的障碍是，浏览器的同源策略阻止了我读取洛谷的返回值。我此前从来没有碰到这种情况，所以立马通过搜索与询问 AI 进行了解，最终通过一个国内无法正常访问的 CORS 代理服务器临时地绕开了这个问题。接着，我发现，由于 CSS 功力有限，自己没有办法做出自己想要的呈现搜索结果的样式。在种种困难下，我的搜索功能停留在半成品阶段，静静地躺在了&lt;a class="link" href="https://github.com/eoinli/oi-jumper/commit/272ad9908cdbfe0201c330db82f55c586d5d2d82" target="_blank" rel="noopener"
>代码&lt;/a>里。四天的思想斗争之后，我决定一切从简。与其从洛谷上爬取信息，不如直接跳转到洛谷的搜索页面去。于是，题目搜索的功能与题目跳转的功能回归到了同样的本质上，也方便了我对多个 OJ 的搜索功能添加支持。&lt;/p>
&lt;h2 id="维护">维护
&lt;/h2>&lt;p>从我最初学习网页开发的时候开始，就有一个东西在我的心头游荡：弹性框架 flexbox。直到我退出开发为止，我都没有学习到 flexbox 框架，还在使用最传统的 CSS Positioning 设置元素的排列方式。所以我想通过这个项目来感受一下 flexbox 给开发带来的便利。这里推荐一个讲 flexbox 的教程 (in English)：&lt;a class="link" href="https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/" target="_blank" rel="noopener"
>An Interactive Guide to Flexbox in CSS&lt;/a>。&lt;/p>
&lt;p>下一个让我花了很大功夫的就是响应式设计。这是我很早就想做，但迟迟没做，却一直能感觉到我应该要去做的一件事情。虽然确实没有什么人会用移动设备卷题，但本着我对开发的热爱与对响应式设计的执念，我还是学习了它的实现方式。很惊喜地，Tailwind CSS 对响应式设计具有原生支持，所以极大程度降低了我的学习成本。我用一两天时间就写好了窄屏幕适配的代码，并激动地将其提交到了仓库里。&lt;/p>
&lt;p>LibreOJ 一直有一个很有意思的功能（当然许多其他网站也有），就是&lt;a class="link" href="https://hitokoto.cn/" target="_blank" rel="noopener"
>一言&lt;/a>。我想在 OI Jumper 上也加入一言的功能。但向对方 API 发出的网络请求不出意外地再次被浏览器的同源策略以同样的方式拦截了。但一言的 API 服务器与洛谷的公开服务器有一个很大的区别，就是一言是支持 &lt;a class="link" href="https://zh.wikipedia.org/zh-cn/JSONP" target="_blank" rel="noopener"
>JSONP (JSON with Padding)&lt;/a> 返回的！我前文所述的被同源策略拦截的时候搜索到了这种解决方式，虽然在支持洛谷搜索的时候发现洛谷的服务器并不支持，但成功在一言的开发上得到了实践。虽然 JSONP 并不是现代网络解决跨域资源共享的主流方式，但我很高兴自己能借此了解到浏览器与网络安全方面冰山一角的知识。&lt;/p>
&lt;p>直到下一次再有什么功能让我想要实现，或者有其他 OJ 需要支持，OI Jumper 将不再频繁更新。它的本质虽然是一个前端项目，但同时也能作为我回归前端开发的练手项目。我从这一项目的开发中学到了许多新知识，希望这些新知识能为我未来的项目开发奠定基础吧。&lt;/p>
&lt;h2 id="回想">回想
&lt;/h2>&lt;p>如果你已经看够了上面的流水账，那么这里可能会给你带来一些启发或者思考。&lt;/p>
&lt;p>就像 lxl 曾在洛谷动态为了批驳洛谷制度中认为 AIGC 是与算法竞赛无关这一部分而回复过的：&lt;/p>
&lt;blockquote>
&lt;p>闭关锁谷！等 AI 把算法竞赛淘汰掉，把 oier 吊打，就不是与算法竞赛无关了！！！&lt;/p>
&lt;/blockquote>
&lt;p>这一天或许迟早要来。但放在算法竞赛这样一个当下的领域里，由于比拼的是人类的思维与智慧，所以人工智能能够扮演的角色至多就是在学习的时候提供辅助，洛谷的制度是可以理解的，毕竟洛谷是一个为人服务的网站。&lt;/p>
&lt;p>但有了这一次的经验，我觉得，抛开算法竞赛不谈，人工智能的介入并不意味着人类程序员一定要被替代。一方面，学习了无数资源的大模型可以在我们学习开发的过程中予以助力，使学习变得更有效率、更有成果，就像我在 Gemini 的辅助下利用 Tailwind CSS 和 JSONP 实现了 OI Jumper 项目一样；另一方面，即使是已经入行的程序员，人工智能扮演的角色也侧重于一个工具，比如帮忙 debug、帮忙优化代码实现等等，AI 相比于程式化的自动机更加智能，能够更有效率地处理一些程序开发中的琐事，但 AI 毕竟不是人脑，AI 的创造是基于过去的资源，而当我们需要面对创新时，只有人脑才能从过去的思维中挣脱，在创新的道路上越走越远。&lt;/p>
&lt;p>在算法竞赛中我们通过学习来锻炼自己的思维能力，这些思维能力的终产物是科学与技术的创新与进步。所以我觉得，人工智能只能为我们整理过去的知识，为现在的人类所用，让现在的人类有更多的时间来学习、来锻炼。人类的未来仍然是，也只能是由人类自己来铺就，而这项大工程如果要得以加速发展，就需要人工智能为我们省下那些面对过去的时间，更需要我们充分利用这些时间来为我们的现在与未来着想。&lt;/p></description></item></channel></rss>